@using Kendo.Mvc.UI
@using StudentInternshipManagement.Models.Entities
@using StudentInternshipManagement.Services.ViewModel

@{
    ViewBag.Title = "Quản lý sinh viên";
    ViewBag.Category = "Quản lý";
    ViewBag.Section = "Sinh viên";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Kendo
{
    @Styles.Render("~/Content/kendo/styles")
    @Scripts.Render("~/Scripts/kendo/scripts")
}


@(Html.Kendo().Grid<StudentViewModel>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Id).Hidden(true);
          columns.Bound(c => c.UserName);
          columns.Bound(c => c.FullName);
          columns.Bound(c => c.BirthDate);
          columns.Bound(c => c.Address);
          columns.Bound(c => c.Phone);
          columns.Bound(c => c.Cpa);
          columns.ForeignKey(p => p.ClassId, (IQueryable<StudentClass>) ViewBag.StudentClasses, "Id", "ClassName").EditorTemplateName("StudentClassTemplate");
          columns.Command(command =>
          {
              command.Edit();
              command.Destroy();
          }).Width(180);
      })
      .ToolBar(toolbar => { toolbar.Create(); toolbar.Custom()
                     .Text("Nhập danh sách sinh viên bằng file Excel Sheet")
                     .Action("AddStudentsByExcelSheet", "Student"); })
      .Editable(editable => editable.Mode(GridEditMode.InLine))
      .Pageable()
      .Sortable(sortable => { sortable.SortMode(GridSortMode.SingleColumn); })
      .Filterable(filterable => filterable.Mode(GridFilterMode.Row))
      .ClientDetailTemplateId("template")
      .DataSource(dataSource => dataSource
          .Ajax()
          .Model(model => model.Id(p => p.Id))
          .Read(read => read.Action("Students_Read", "Student"))
          .Create(create => create.Action("Students_Create", "Student"))
          .Update(update => update.Action("Students_Update", "Student"))
          .Destroy(destroy => destroy.Action("Students_Destroy", "Student"))
      )
      .Events(events => events
          .Edit("onEdit")
          )
      .Scrollable(a => a.Height("auto"))
      )


<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<LearningClassStudent>()
          .Name("grid_#=Id#") // Truyền Id của student vào đây để đặt tên cho grid 
          .Columns(columns =>
          {
              columns.ForeignKey(p => p.ClassId, (IQueryable<LearningClass>)ViewBag.LearningClasses, "Id", "ClassName").EditorTemplateName("LearningClassTemplate");
              columns.Bound(o => o.MidTermPoint);
              columns.Bound(o => o.EndTermPoint);
              columns.Bound(o => o.TotalPoint);
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Read(read => read.Action("GetLearningClassList", "Student", new { studentId = "#=Id#" })) //Truyền Id của student vào đây để gửi tham số lên server 
          )
          .Pageable()
          .Sortable()
          .ToClientTemplate())
</script>
<script type="text/javascript">

    function onEdit(e) {
        if (!e.model.isNew()) {
            $('[name="Id"]').attr("readonly", true);
        }
    }

    function dateFromStringWithTime(str) {

        var match;
        if (!(match = str.match(/\d+/))) {
            return false;
        }
        var date = new Date();
        date.setTime(match[0] - 0);
        return date;
    }

    $("#fs-item-data").kendoGrid({
        dataSource: dataSource,
        navigatable: true,
        columns: file_browser.getAclColumns(),
        pageable: true,
        height: 400,
        toolbar: ["create", "cancel"],
        editable: {
            mode: "popup",
            template: kendo.template($("#custom_editor").html())
        }
    });
</script>